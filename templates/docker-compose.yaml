
version: '3.8'
services: 


  proxy:
    image: traefik:2.10.4
    volumes:
      - /etc/localtime:/etc/localtime
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ config_dir }}/certs/:/etc/traefik/certs/
      - {{ config_dir }}/dynamic/:/etc/traefik/dynamic/
      - {{ data_dir }}/acme/:/etc/traefik/acme/
    ports:
      - 80:80
      - 443:443
    environment:
      - 'CF_API_EMAIL={{ cf_api_email }}'
      - 'CF_DNS_API_TOKEN={{ cf_dns_api_token }}'
    command:
      # Logging
      - '--log.level=INFO'
      - '--accesslog=true'

      # Enable dashboard
      - '--api=true'
      - '--api.dashboard={{ traefik_dashboard | string | lower  }}'
      
      # Docker swarm configuration
      - '--providers.docker=true'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.swarmMode=true'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.network={{ traefik_network }}'
      - '--providers.docker.watch=true'

      # File provider
      - '--providers.file=true'
      - '--providers.file.directory=/etc/traefik/dynamic'
      - '--providers.file.watch=true'
      
      # Configure entrypoints
      - '--entryPoints.web.address=:80'
      - '--entryPoints.websecure.address=:443'

      # needed to enable TLS, unless a cert-resolver (ACME) is used
      - '--entryPoints.websecure.http.tls=true'

      # Global HTTP -> HTTPS redirect
      - '--entryPoints.web.http.redirections.entryPoint.to=websecure'
      - '--entryPoints.web.http.redirections.entryPoint.scheme=https'

      # disable backend server ssl verification
      - '--serversTransport.insecureSkipVerify=true'

      # Trust X-Forwarded-* Headers from specific IPs
      # https://community.traefik.io/t/how-to-properly-use-x-forwarded-for-in-v2/3834
      - '--entryPoints.web.forwardedHeaders.trustedIPs={{ traefik_trusted_ips | join(",") }}'
      - '--entryPoints.websecure.forwardedHeaders.trustedIPs={{ traefik_trusted_ips | join(",") }}'

      # certificate resolvers
{% for resolver in traefik_acme_resolvers %}
{% if resolver["challenge"] == "HTTP-01" %}
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.httpchallenge=true'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.email={{ resolver["email"] }}'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.storage=/etc/traefik/acme/{{ resolver["name"] }}.json'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.caServer={{ resolver["url"] }}'
{% endif %}
{% if resolver["challenge"] == "DNS-01" %}
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.dnschallenge=true'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.dnschallenge.provider={{ resolver["provider"] }}'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.dnschallenge.resolvers[0]={{ resolver["dns_resolver"] }}'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.email={{ resolver["email"] }}'
      - '--certificatesresolvers.{{ resolver["name"] }}.acme.storage=/etc/traefik/acme/{{ resolver["name"] }}.json'
{% endif %}
{% endfor %}
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
      labels:
        - traefik.enable={{ traefik_dashboard | string | lower  }}
        - traefik.http.services.api@internal.loadbalancer.server.port=8080
        #- traefik.http.routers.dashboard.service=api@internal
{% if traefik_cert_resolver %}
        - traefik.http.routers.dashboard.tls.certresolver={{ traefik_cert_resolver }}
{% endif %}
        
        # router rules must be defined within a single docker label
        - traefik.http.routers.dashboard.rule=Host(`{{ traefik_host }}`)
        
        # basic-auth middleware
        - traefik.http.middlewares.dashboard-auth.basicauth.users={{ traefik_htpasswd }}

        # redirect /dashboard to /dashboard/
        - traefik.http.middlewares.dashboard-redirect.redirectregex.regex=^https://{{ traefik_host | replace('.', '\.') }}$$
        - traefik.http.middlewares.dashboard-redirect.redirectregex.replacement=https://{{ traefik_host }}/dashboard/
        - traefik.http.middlewares.dashboard-redirect.redirectregex.permanent=false

        # assign middlewares (order matters)
        - traefik.http.routers.dashboard.middlewares=dashboard-auth@docker, dashboard-redirect@docker
    networks:
      - {{ traefik_network }}

networks:
  {{ traefik_network }}:
    external:
      name: {{ traefik_network }}
